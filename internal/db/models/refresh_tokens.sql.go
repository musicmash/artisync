// Code generated by sqlc. DO NOT EDIT.
// source: refresh_tokens.sql

package models

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO artist_sync_refresh_tokens (user_name, expired_at, value)
VALUES ($1, $2, $3)
ON CONFLICT (user_name)
DO UPDATE SET value= $3
`

type CreateRefreshTokenParams struct {
	UserName  string    `json:"user_name"`
	ExpiredAt time.Time `json:"expired_at"`
	Value     string    `json:"value"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.UserName, arg.ExpiredAt, arg.Value)
	return err
}

const getUserSyncTask = `-- name: GetUserSyncTask :one
SELECT id, created_at, updated_at, user_name, state, details FROM artist_one_time_sync_tasks
WHERE user_name = $1
`

func (q *Queries) GetUserSyncTask(ctx context.Context, userName string) (ArtistOneTimeSyncTask, error) {
	row := q.db.QueryRowContext(ctx, getUserSyncTask, userName)
	var i ArtistOneTimeSyncTask
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.State,
		&i.Details,
	)
	return i, err
}
