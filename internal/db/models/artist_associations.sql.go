// Code generated by sqlc. DO NOT EDIT.
// source: artist_associations.sql

package models

import (
	"context"
)

const createArtistAssociation = `-- name: CreateArtistAssociation :one
INSERT INTO "spotify_artist_associations" (artist_id, store_name, store_id)
VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
RETURNING id, artist_id, store_name, store_id
`

type CreateArtistAssociationParams struct {
	ArtistID  int64  `json:"artist_id"`
	StoreName string `json:"store_name"`
	StoreID   string `json:"store_id"`
}

func (q *Queries) CreateArtistAssociation(ctx context.Context, arg CreateArtistAssociationParams) (SpotifyArtistAssociation, error) {
	row := q.db.QueryRowContext(ctx, createArtistAssociation, arg.ArtistID, arg.StoreName, arg.StoreID)
	var i SpotifyArtistAssociation
	err := row.Scan(
		&i.ID,
		&i.ArtistID,
		&i.StoreName,
		&i.StoreID,
	)
	return i, err
}

const getArtistAssociation = `-- name: GetArtistAssociation :one
SELECT id, artist_id, store_name, store_id FROM "spotify_artist_associations"
WHERE store_name = $1 and store_id = $2
LIMIT 1
`

type GetArtistAssociationParams struct {
	StoreName string `json:"store_name"`
	StoreID   string `json:"store_id"`
}

func (q *Queries) GetArtistAssociation(ctx context.Context, arg GetArtistAssociationParams) (SpotifyArtistAssociation, error) {
	row := q.db.QueryRowContext(ctx, getArtistAssociation, arg.StoreName, arg.StoreID)
	var i SpotifyArtistAssociation
	err := row.Scan(
		&i.ID,
		&i.ArtistID,
		&i.StoreName,
		&i.StoreID,
	)
	return i, err
}
